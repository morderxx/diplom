// client/chat.js
const API_URL      = '/api';
const token        = localStorage.getItem('token');
const userNickname = localStorage.getItem('nickname');

let socket      = null;
let currentRoom = null;

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫
document.getElementById('current-user').textContent = userNickname;

// –ê–≤—Ç–æ-—Ä–æ—Å—Ç textarea
const textarea = document.getElementById('message');
textarea.addEventListener('input', () => {
  textarea.style.height = 'auto';
  textarea.style.height = textarea.scrollHeight + 'px';
});

// –°–∫—Ä—ã—Ç–æ–µ <input type="file"> –¥–ª—è –∫–Ω–æ–ø–∫–∏ üìé
const fileInput = document.createElement('input');
fileInput.type = 'file';
fileInput.style.display = 'none';
document.body.appendChild(fileInput);
document.getElementById('attach-btn').onclick = () => fileInput.click();

fileInput.onchange = async () => {
  if (!currentRoom) return alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç');
  const file = fileInput.files[0];
  if (!file) return;

  const form = new FormData();
  form.append('file', file);
  form.append('roomId', currentRoom);

  const res = await fetch(`${API_URL}/files`, {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${token}` },
    body: form
  });
  if (!res.ok) console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', await res.text());
  fileInput.value = '';
};

document.getElementById('voice-btn').onclick = () => {
  alert('–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
};

// 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç
async function loadRooms() {
  const res = await fetch(`${API_URL}/rooms`, { headers: { 'Authorization': `Bearer ${token}` } });
  if (!res.ok) return console.error(await res.text());
  const rooms = await res.json();
  const ul = document.getElementById('rooms-list');
  ul.innerHTML = '';
  rooms.forEach(r => {
    const li = document.createElement('li');
    li.dataset.id = r.id;
    li.textContent = r.is_group ? (r.name || `–ì—Ä—É–ø–ø–∞ #${r.id}`)
                                : (r.members.find(n => n !== userNickname) || '(–±–µ–∑ –∏–º–µ–Ω–∏)');
    li.onclick = () => joinRoom(r.id);
    ul.appendChild(li);
  });
}

// 2) –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
  const res = await fetch(`${API_URL}/users`, { headers: { 'Authorization': `Bearer ${token}` } });
  if (!res.ok) return console.error(await res.text());
  const users = await res.json();
  const ul = document.getElementById('users-list');
  ul.innerHTML = '';
  users.forEach(u => {
    if (u.nickname === userNickname) return;
    const li = document.createElement('li');
    li.textContent = u.nickname;
    li.onclick = () => openPrivateChat(u.nickname);
    ul.appendChild(li);
  });
}

// 3) –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
async function openPrivateChat(otherNick) {
  const roomsRes = await fetch(`${API_URL}/rooms`, { headers: { 'Authorization': `Bearer ${token}` } });
  const rooms = roomsRes.ok ? await roomsRes.json() : [];
  const key = [userNickname, otherNick].sort().join('|');
  const exist = rooms.find(r =>
    !r.is_group &&
    Array.isArray(r.members) &&
    r.members.sort().join('|') === key
  );
  if (exist) return joinRoom(exist.id);

  const create = await fetch(`${API_URL}/rooms`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ is_group: false, members: [userNickname, otherNick] })
  });
  if (!create.ok) return console.error(await create.text());
  const { roomId } = await create.json();
  await loadRooms();
  joinRoom(roomId);
}

// 4) –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É + WS + –∏—Å—Ç–æ—Ä–∏—è
async function joinRoom(roomId) {
  if (socket) socket.close();
  currentRoom = roomId;
  document.getElementById('chat-box').innerHTML = '';
  document.getElementById('chat-section').classList.add('active');

  socket = new WebSocket((location.protocol === 'https:' ? 'wss://' : 'ws://') + location.host);
  socket.onopen = () => socket.send(JSON.stringify({ type: 'join', token, roomId }));
  socket.onmessage = ev => {
    const msg = JSON.parse(ev.data);
    if (msg.type === 'message') {
      appendMessage(msg.sender, msg.text, msg.time);
    } else if (msg.type === 'file') {
      appendFile(msg.sender, msg.fileId, msg.filename, msg.mimeType, msg.time);
    }
  };

  const histRes = await fetch(`${API_URL}/rooms/${roomId}/messages`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (!histRes.ok) return console.error(await histRes.text());
  const history = await histRes.json();
  history.forEach(m => {
    if (m.file_id) {
      appendFile(m.sender_nickname, m.file_id, m.filename, m.mime_type, m.time);
    } else {
      appendMessage(m.sender_nickname, m.text, m.time);
    }
  });
}

// 5) appendMessage
function appendMessage(sender, text, time) {
  const chatBox = document.getElementById('chat-box');
  const wrapper = document.createElement('div');
  wrapper.className = 'message-wrapper';

  const msgEl = document.createElement('div');
  msgEl.className = sender === userNickname ? 'my-message' : 'other-message';

  const info = document.createElement('div');
  info.className = 'message-info';
  info.textContent = `${sender} ‚Ä¢ ${new Date(time).toLocaleTimeString([], {
    hour: '2-digit', minute: '2-digit'
  })}`;

  const bubble = document.createElement('div');
  bubble.className = 'message-bubble';

  const textEl = document.createElement('div');
  textEl.className = 'message-text';
  textEl.textContent = text;

  bubble.appendChild(textEl);
  msgEl.append(info, bubble);
  wrapper.appendChild(msgEl);
  chatBox.appendChild(wrapper);
  chatBox.scrollTop = chatBox.scrollHeight;
}

// helper: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ Blob, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ UTF-8 –∏–º—è
async function downloadFile(fileId, filename) {
  try {
    const res  = await fetch(`${API_URL}/files/${fileId}`);
    if (!res.ok) throw new Error('Fetch error');
    const blob = await res.blob();
    const url  = URL.createObjectURL(blob);
    const a    = document.createElement('a');
    a.href     = url;
    a.download = filename;      // <- –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –∏–º—è
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  } catch (e) {
    console.error('Download failed:', e);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
  }
}


// 6) appendFile
// 6) –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
function appendFile(sender, fileId, filename, mimeType, time) {
  // –∫–æ—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  let displayName = filename;
  try {
    displayName = decodeURIComponent(escape(filename));
  } catch {
    /* –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª */
  }

  const chatBox = document.getElementById('chat-box');
  const wrapper = document.createElement('div');
  wrapper.className = 'message-wrapper';

  const msgEl = document.createElement('div');
  msgEl.className = sender === userNickname ? 'my-message' : 'other-message';

  const info = document.createElement('div');
  info.className = 'message-info';
  info.textContent = `${sender} ‚Ä¢ ${new Date(time).toLocaleTimeString([], {
    hour: '2-digit', minute: '2-digit'
  })}`;

  const bubble = document.createElement('div');
  bubble.className = 'message-bubble media-bubble';


  let contentEl;
  if (mimeType.startsWith('image/')) {
    contentEl = document.createElement('img');
    contentEl.src = `${API_URL}/files/${fileId}`;
    contentEl.style.maxWidth = '200px';
    contentEl.style.borderRadius = '8px';
  } else if (mimeType.startsWith('audio/')) {
    contentEl = document.createElement('audio');
    contentEl.controls = true;
    contentEl.src = `${API_URL}/files/${fileId}`;
  } else if (mimeType.startsWith('video/')) {
    contentEl = document.createElement('video');
    contentEl.controls = true;
    contentEl.style.maxWidth = '200px';
    contentEl.src = `${API_URL}/files/${fileId}`;
  } else {
    // –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ ‚Äî —Å—Å—ã–ª–∫–∞, –ø—Ä–∏ –∫–ª–∏–∫–µ —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ downloadFile
    contentEl = document.createElement('a');
    contentEl.href = '#';
    contentEl.textContent = `üìé ${displayName}`;
    contentEl.style.color = '#065fd4';  // optional: –≤–µ—Ä–Ω—É—Ç—å ¬´—Å–∏–Ω–∏–π¬ª —Ü–≤–µ—Ç —Å—Å—ã–ª–∫–∏
    contentEl.onclick = e => {
      e.preventDefault();
      downloadFile(fileId, displayName);
    };
  }

  bubble.appendChild(contentEl);
  msgEl.append(info, bubble);
  wrapper.appendChild(msgEl);
  chatBox.appendChild(wrapper);
  chatBox.scrollTop = chatBox.scrollHeight;
}

// 7) sendMessage
function sendMessage() {
  const inp = document.getElementById('message');
  const text = inp.value.trim();
  if (!text || !socket || socket.readyState !== WebSocket.OPEN) return;
  socket.send(JSON.stringify({ type: 'message', token, roomId: currentRoom, text }));
  inp.value = '';
}

document.getElementById('send-btn').onclick = sendMessage;
document.getElementById('message').addEventListener('keypress', e => {
  if (e.key === 'Enter') {
    e.preventDefault();
    sendMessage();
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadRooms();
loadUsers();
// Lightbox elements
const overlay = document.getElementById('lightbox-overlay');
const lightboxImg = document.getElementById('lightbox-image');
const btnClose = document.getElementById('lightbox-close');
const btnDownload = document.getElementById('lightbox-download');

// –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ª—é–±–æ–µ <img> –≤ —á–∞—Ç–µ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∞–π—Ç–±–æ–∫—Å
document.getElementById('chat-box').addEventListener('click', e => {
  if (e.target.tagName === 'IMG' && e.target.src.includes('/api/files/')) {
    lightboxImg.src = e.target.src;
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ filename
    const url = e.target.src;
    overlay.dataset.url = url;
    // filename –±–µ—Ä–µ–º –∏–∑ src (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å) –∏–ª–∏ –º–æ–∂–Ω–æ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
    const parts = url.split('/');
    overlay.dataset.filename = decodeURIComponent(parts.pop());
    overlay.classList.remove('hidden');
  }
});

// –ó–∞–∫—Ä—ã—Ç—å –ª–∞–π—Ç–±–æ–∫—Å
btnClose.onclick = () => {
  overlay.classList.add('hidden');
  lightboxImg.src = '';
};

// –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
btnDownload.onclick = () => {
  const url = overlay.dataset.url;
  const filename = overlay.dataset.filename;
  // fetch + blob, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  fetch(url)
    .then(r => r.blob())
    .then(blob => {
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      link.remove();
      URL.revokeObjectURL(link.href);
    })
    .catch(() => alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
};

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
overlay.addEventListener('click', e => {
  if (e.target === overlay) btnClose.click();
});
