// server/client/chat.js
document.addEventListener('DOMContentLoaded', () => {
  const API_URL      = '/api';
  const token        = localStorage.getItem('token');
  const userNickname = localStorage.getItem('nickname');
  const renderedFileIds = new Set();

  if (!token || !userNickname) {
    window.location.href = 'index.html';
    return;
  }

  let socket         = null;
  let currentRoom    = null;
  let currentPeer = null;  
  let mediaRecorder;
  let audioChunks    = [];
  let pc             = null;
  let localStream    = null;
  let callStartTime  = null;
  let callTimerIntvl = null;

  const stunConfig = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

  // UI elements
  document.getElementById('current-user').textContent = userNickname;
  const textarea     = document.getElementById('message');
  const attachBtn    = document.getElementById('attach-btn');
  const callBtn      = document.getElementById('call-btn');
  const sendBtn      = document.getElementById('send-btn');
  const voiceBtn     = document.getElementById('voice-btn');

  // File input
  const fileInput    = document.createElement('input');
  fileInput.type     = 'file';
  fileInput.style.display = 'none';
  document.body.appendChild(fileInput);

  // Call window elements
  const callWindow   = document.getElementById('call-window');
  const callTitle    = document.getElementById('call-title');
  const callStatus   = document.getElementById('call-status');
  const callTimerEl  = document.getElementById('call-timer');
  const answerBtn    = document.getElementById('call-answer');
  const cancelBtn    = document.getElementById('call-cancel');
  const minimizeBtn  = document.getElementById('call-minimize');
  const remoteAudio  = document.getElementById('remote-audio');

  // Lightbox elements
  const overlay      = document.getElementById('lightbox-overlay');
  const lightboxImg  = document.getElementById('lightbox-image');
  const lbCloseBtn   = document.getElementById('lightbox-close');
  const lbDownloadBtn= document.getElementById('lightbox-download');

  // –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  function appendSystem(text) {
    const chatBox = document.getElementById('chat-box');
    const el = document.createElement('div');
    el.className = 'system-message';
    el.textContent = text;
    chatBox.appendChild(el);
    chatBox.scrollTop = chatBox.scrollHeight;
  }
// –í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ chat.js:
function appendCenterCall(text) {
  const chatBox = document.getElementById('chat-box');
  const wrapper = document.createElement('div');
  wrapper.className = 'system-call-wrapper';

  const el = document.createElement('div');
  el.className = 'system-call';
  el.textContent = text;

  wrapper.appendChild(el);
  chatBox.appendChild(wrapper);
  chatBox.scrollTop = chatBox.scrollHeight;
}
  // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
  function showCallWindow(peer, incoming = false) {
    currentPeer = peer;  
    callTitle.textContent = `–ó–≤–æ–Ω–æ–∫ —Å ${peer}`;
    callStatus.textContent = incoming ? '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫' : '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞';
    callTimerEl.textContent = '00:00';
    answerBtn.style.display = incoming ? 'inline-block' : 'none';
    cancelBtn.textContent = incoming ? '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' : '–û—Ç–º–µ–Ω–∞';
    callWindow.classList.remove('hidden');
    callStartTime = Date.now();
    callTimerIntvl = setInterval(() => {
      const sec = Math.floor((Date.now() - callStartTime) / 1000);
      const m = String(Math.floor(sec / 60)).padStart(2, '0');
      const s = String(sec % 60).padStart(2, '0');
      callTimerEl.textContent = `${m}:${s}`;
    }, 1000);
  }

  // –°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞
  function hideCallWindow() {
    clearInterval(callTimerIntvl);
    callWindow.classList.add('hidden');
  }

  
// 1) endCall: –∑–∞–∫—Ä—ã–ª–∏ WebRTC, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ /calls –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –ø–æ WS –∏ call, –∏ message
async function endCall(message, status = 'finished') {
  clearInterval(callTimerIntvl);
  if (pc) { pc.close(); pc = null; }
  if (localStream) {
    localStream.getTracks().forEach(t => t.stop());
    localStream = null;
  }
  hideCallWindow();

  const durationSec = Math.floor((Date.now() - callStartTime) / 1000);
  const durStr     = new Date(durationSec * 1000).toISOString().substr(11, 8);
  const startedISO = new Date(callStartTime).toISOString();
  const endedISO   = new Date().toISOString();

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∏ –≤ system, –∏ –≤ chat:
  const callMessage = durationSec === 0
    ? `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${userNickname} –∫ ${currentPeer} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`
    : `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${userNickname} –∫ ${currentPeer} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${durStr}.`;

  // 1) –õ–æ–∫–∞–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ
  appendCenterCall(callMessage);

  // 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –≤ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É
  try {
    await fetch(`${API_URL}/rooms/${currentRoom}/calls`, {
      method: 'POST',
      headers: {
        'Content-Type':  'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        initiator:  userNickname,
        recipient:  currentPeer,
        started_at: startedISO,
        ended_at:   endedISO,
        status:     status,
        duration:   durationSec
      })
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', err);
    appendSystem('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞.');
  }

  // 3) –®–ª—ë–º –ø–æ WS —Å–æ–±—ã—Ç–∏–µ call, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã —Ç–æ–∂–µ —É–≤–∏–¥–µ–ª–∏ system-call
  if (socket && socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({
      type:       'call',
      initiator:  userNickname,
      recipient:  currentPeer,
      status:     status,
      started_at: startedISO,
      ended_at:   endedISO,
      duration:   durationSec
    }));

    // 4) –ò —Å—Ä–∞–∑—É –∂–µ —à–ª—ë–º —Å–æ–±—ã—Ç–∏–µ message, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å –≤ messages
    //    –∏ –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è –≤–∞—Å) –ø–æ–ª—É—á–∏–ª–∏ —Ç–∏–ø 'message' –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∏ appendMessage
    socket.send(JSON.stringify({
      type:   'message',
      token,                    // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
      roomId: currentRoom,
      text:   callMessage
    }));
  }
}







  // –ê–≤—Ç–æ-—Ä–æ—Å—Ç textarea
  textarea.addEventListener('input', () => {
    textarea.style.height = 'auto';
    textarea.style.height = textarea.scrollHeight + 'px';
  });

  // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  attachBtn.onclick = () => fileInput.click();
fileInput.onchange = () => {
  (async () => {
    try {
      if (!currentRoom) {
        alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç');
        return;
      }
      const file = fileInput.files[0];
      if (!file) return;

      // 1) –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const form = new FormData();
      form.append('file', file);
      form.append('roomId', currentRoom);
      const res = await fetch(`${API_URL}/files`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: form
      });
      if (!res.ok) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', await res.text());
        return;
      }

      // 2) –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const { fileId, filename, mimeType, time } = await res.json();

      // 3) WS‚Äë—Ä–∞—Å—Å—ã–ª–∫–∞
      if (socket && socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type:     'file',
          roomId:   currentRoom,
          sender:   userNickname,
          fileId,
          filename,
          mimeType,
          time
        }));
      }

      

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ fileInput.onchange:', err);
    } finally {
      // —Å–±—Ä–æ—Å input –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ send
      fileInput.value = '';
      sendBtn.disabled = false;   // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª disabled
    }
  })();
};



  // –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  voiceBtn.onclick = async () => {
    if (!currentRoom) return alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç');
    if (mediaRecorder && mediaRecorder.state === 'recording') {
      mediaRecorder.stop();
      voiceBtn.textContent = 'üé§';
      voiceBtn.disabled = true;
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];
      mediaRecorder.ondataavailable = e => { if (e.data.size) audioChunks.push(e.data); };
      mediaRecorder.onstop = async () => {
        const blob = new Blob(audioChunks, { type: 'audio/webm' });
        const file = new File([blob], `voice-${Date.now()}.webm`, { type: blob.type });
        const form = new FormData();
        form.append('file', file);
        form.append('roomId', currentRoom);
        const res = await fetch(`${API_URL}/files`, {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${token}` },
          body: form
        });
        if (!res.ok) console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', await res.text());
        voiceBtn.disabled = false;
      };
      mediaRecorder.start();
      voiceBtn.textContent = '‚ñ†';
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', err);
      alert('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebRTC
function createPeerConnection() {
  pc = new RTCPeerConnection(stunConfig);

  pc.onicecandidate = e => {
    if (e.candidate && socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({ type: 'webrtc-ice', payload: e.candidate }));
    }
  };

  // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä
// –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –∏ —è–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  pc.ontrack = e => {
    const stream = e.streams && e.streams[0];
    if (!stream) {
      console.warn('–ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω.');
      return;
    }
    console.log('–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, tracks=', stream.getAudioTracks());

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å—Ç—Ä–∏–º –∏ —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
    remoteAudio.srcObject = stream;
    remoteAudio.muted = false;
    remoteAudio.volume = 1.0;

    // –ü—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å (–ª–æ–≤–∏–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ–ø–ª–µ–π)
    remoteAudio.play()
      .then(() => console.log('remoteAudio.play() —É—Å–ø–µ—à–Ω–æ'))
      .catch(err => console.error('remoteAudio.play() –æ—Ç–∫–ª–æ–Ω—ë–Ω:', err));
  };
}


async function startCall() {
  createPeerConnection();
  showCallWindow(currentPeer, false);
  try {
    localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));
    const offer = await pc.createOffer();
    await pc.setLocalDescription(offer);

    socket.send(JSON.stringify({
      type: 'webrtc-offer',
      from: userNickname,
      to: currentPeer,
      payload: offer
    }));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ:', err);
  }
}


  async function handleOffer(offer) {
    createPeerConnection();
    showCallWindow(currentPeer, true);
    localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
    localStream.getTracks().forEach(t => pc.addTrack(t, localStream));
    await pc.setRemoteDescription(offer);
  }

  async function handleAnswer(answer) {
    if (!pc) return;
    await pc.setRemoteDescription(answer);
    callStatus.textContent = '–í —Ä–∞–∑–≥–æ–≤–æ—Ä–µ';
    answerBtn.style.display = 'none';
  }

  async function handleIce(candidate) {
    if (pc) await pc.addIceCandidate(candidate);
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–º
  callBtn.onclick = () => {
    if (socket && socket.readyState === WebSocket.OPEN) startCall();
  };
  
answerBtn.onclick = async () => {
  try {
    if (!pc) return;
    localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
    localStream.getTracks().forEach(track => pc.addTrack(track, localStream));

    const answer = await pc.createAnswer();
    await pc.setLocalDescription(answer);
    socket.send(JSON.stringify({
      type: 'webrtc-answer',
      from: userNickname,
      payload: answer
    }));

    callStatus.textContent = '–í —Ä–∞–∑–≥–æ–≤–æ—Ä–µ';
    answerBtn.style.display = 'none';
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫:', err);
  }
};


 cancelBtn.onclick = () => {
  if (socket && socket.readyState === WebSocket.OPEN) {
    // —à–ª—ë–º –æ—Ç–º–µ–Ω—É –∏ roomId, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ—Å–ª–∞–ª –¥—Ä—É–≥–æ–º—É
    socket.send(JSON.stringify({
      type:   'webrtc-cancel',
      from: userNickname,
      roomId: currentRoom
    }));
  }
  // —Å–≤–æ—ë –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
  endCall('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–≤–æ–Ω–æ–∫', 'cancelled');
};

 // minimizeBtn.onclick = () => callWindow.classList.toggle('minimized');

  // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –∑–≤–æ–Ω–∫–∞
  let dragging = false, dx = 0, dy = 0;
  document.querySelector('.call-header').addEventListener('mousedown', e => {
    dragging = true;
    dx = e.clientX - callWindow.offsetLeft;
    dy = e.clientY - callWindow.offsetTop;
  });
  document.addEventListener('mousemove', e => {
    if (dragging) {
      callWindow.style.left = `${e.clientX - dx}px`;
      callWindow.style.top  = `${e.clientY - dy}px`;
    }
  });
  document.addEventListener('mouseup', () => { dragging = false; });

// 2) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è Lightbox ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç blob: –∏–ª–∏ –ø—Ä—è–º–æ–π URL –∏ –∫–∞—á–∞–µ—Ç –ø–æ data-src
document.getElementById('chat-box').addEventListener('click', e => {
  if (e.target.tagName === 'IMG' && e.target.dataset.src) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é (—ç—Ç–æ –±—É–¥–µ—Ç blob: –∏–ª–∏ –ø—Ä—è–º–æ–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    lightboxImg.src = e.target.src;
    // –°–∫–∞—á–∏–≤–∞—Ç—å –±—É–¥–µ–º –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É API-URL
    overlay.dataset.url      = e.target.dataset.src;
    overlay.dataset.filename = e.target.dataset.filename;
    overlay.classList.remove('hidden');
  }
});



  lbCloseBtn.onclick = () => overlay.classList.add('hidden');
  lbDownloadBtn.onclick = () => {
    const url = overlay.dataset.url;
    const filename = overlay.dataset.filename;
    const a = document.createElement('a');
    a.href = url; a.download = filename;
    document.body.appendChild(a); a.click(); a.remove();
  };
  overlay.addEventListener('click', e => { if (e.target === overlay) overlay.classList.add('hidden'); });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Ç–∞
  async function loadRooms() {
    const res = await fetch(`${API_URL}/rooms`, { headers: { Authorization: `Bearer ${token}` } });
    if (!res.ok) return console.error(await res.text());
    const rooms = await res.json();
    const ul = document.getElementById('rooms-list');
    ul.innerHTML = '';
    rooms.forEach(r => {
      const li = document.createElement('li');
      li.textContent = r.is_group
        ? (r.name || `–ì—Ä—É–ø–ø–∞ #${r.id}`)
        : (r.members.find(n => n !== userNickname) || '(–±–µ–∑ –∏–º–µ–Ω–∏)');
      li.dataset.id = r.id;
        li.onclick = () => {
       // –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞ ‚Äî –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω, —Ç–æ peer = –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫
       if (!r.is_group) {
         currentPeer = r.members.find(n => n !== userNickname);
       } else {
         // –¥–ª—è –≥—Ä—É–ø–ø ‚Äî –ª–∏–±–æ –∏–º—è –≥—Ä—É–ø–ø—ã, –ª–∏–±–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ id
         currentPeer = r.name || `–ì—Ä—É–ø–ø–∞ #${r.id}`;
       }
       joinRoom(r.id);
     };
      ul.appendChild(li);
    });
  }

  async function loadUsers() {
    const res = await fetch(`${API_URL}/users`, { headers: { Authorization: `Bearer ${token}` } });
    if (!res.ok) return console.error(await res.text());
    const users = await res.json();
    const ul = document.getElementById('users-list');
    ul.innerHTML = '';
    users.forEach(u => {
      if (u.nickname === userNickname) return;
      const li = document.createElement('li');
      li.textContent = u.nickname;
      li.onclick = () => openPrivateChat(u.nickname);
      ul.appendChild(li);
    });
  }

  async function openPrivateChat(otherNick) {
    currentPeer = otherNick;
    const rr = await fetch(`${API_URL}/rooms`, { headers: { Authorization: `Bearer ${token}` } });
    const rooms = rr.ok ? await rr.json() : [];
    const key = [userNickname, otherNick].sort().join('|');
    const ex = rooms.find(r =>
      !r.is_group && r.members.sort().join('|') === key
    );
    if (ex) return joinRoom(ex.id);

    const cr = await fetch(`${API_URL}/rooms`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify({ is_group: false, members: [userNickname, otherNick] })
    });
    const { roomId } = await cr.json();
    await loadRooms();
    joinRoom(roomId);
  }
  

  function appendCall({ initiator, recipient, status, happened_at, ended_at, duration }) {
    const chatBox = document.getElementById('chat-box');
    const wrapper = document.createElement('div');
    wrapper.className = 'message-wrapper';
    // –≤—ã—Ä–æ–≤–Ω—è–µ–º ¬´–∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö¬ª, –Ω–æ –æ—Ç–ª–∏—á–∏–º —Ü–≤–µ—Ç–æ–º
    const msgEl = document.createElement('div');
    msgEl.className = 'call-message'; 
  
    // –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–≤–æ–Ω–∫–∞
    const info = document.createElement('div');
    info.className = 'call-info';
    // —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è
    const time  = new Date(happened_at).toLocaleTimeString([], { hour:'2-digit', minute:'2-digit' });
    const durStr = duration
      ? new Date(duration * 1000).toISOString().substr(11,8)
      : '--:--:--';
  
    info.innerHTML = `
      <div>üìû <strong>${initiator}</strong> ‚Üí <strong>${recipient}</strong></div>
      <div>${status} ‚Ä¢ ${durStr} ‚Ä¢ ${time}</div>
    `;
  
    msgEl.appendChild(info);
    wrapper.appendChild(msgEl);
    chatBox.appendChild(wrapper);
    chatBox.scrollTop = chatBox.scrollHeight;
  }
  
async function joinRoom(roomId) {
  if (socket) socket.close();
  // –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  renderedFileIds.clear();
  currentRoom = roomId;
  document.getElementById('chat-box').innerHTML = '';
  document.getElementById('chat-section').classList.add('active');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket
  socket = new WebSocket(
    (location.protocol === 'https:' ? 'wss://' : 'ws://') +
      location.host
  );
  socket.onopen = () =>
    socket.send(JSON.stringify({ type: 'join', token, roomId }));
  socket.onmessage = ev => {
    const msg = JSON.parse(ev.data);
    switch (msg.type) {
      case 'webrtc-cancel':
        endCall('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–≤–æ–Ω–æ–∫', 'cancelled');
        break;

      case 'message':
        appendMessage(msg.sender, msg.text, msg.time);
        break;

   case 'file':
      // –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º appendFile ‚Äî
      // –¥—É–±–ª–∏ –æ—Ç—Å–µ–µ—Ç—Å—è —Ç–∞–º —Å–∞–º–æÃÅ–π
      appendFile(
        msg.sender,
        msg.fileId,
        msg.filename,
        msg.mimeType,
        msg.time
      );
      break;

      case 'webrtc-offer':
        currentPeer = msg.from;
        handleOffer(msg.payload);
        showCallWindow(currentPeer, true);
        break;

      case 'webrtc-answer':
        handleAnswer(msg.payload);
        break;

      case 'webrtc-ice':
        handleIce(msg.payload);
        break;

case 'call': {
      // 1) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const durStr = msg.duration
        ? new Date(msg.duration * 1000).toISOString().substr(11, 8)
        : '00:00:00';
      const text = msg.duration === 0
        ? `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${msg.initiator} –∫ ${msg.recipient} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`
        : `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${msg.initiator} –∫ ${msg.recipient} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${durStr}.`;

      appendCenterCall(text);

      // 2) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
      try {
        const res = await fetch(`${API_URL}/rooms/${currentRoom}/messages`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!res.ok) throw new Error(await res.text());
        const history = await res.json();
        // 3) –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const last = history[history.length - 1];
        if (last && last.text) {
          appendMessage(
            last.sender_nickname || last.sender,
            last.text,
            last.time
          );
        }
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ messages:', err);
      }
      break;
    }


      default:
        console.warn('Unknown message type:', msg.type);
    }  // ‚Üê –∑–∞–∫—Ä—ã–≤–∞–µ–º switch

  };   // ‚Üê –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é onmessage


  // ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const res = await fetch(`${API_URL}/rooms/${roomId}/messages`, {
    headers: { Authorization: `Bearer ${token}` }
  });
  if (!res.ok) {
    console.error(await res.text());
    return;
  }
  const history = await res.json();
// —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ const history = await res.json();
console.log('RAW HISTORY:', JSON.stringify(history, null, 2));

history.forEach(m => {

 if (m.type === 'call') {
    const durStr = m.duration
      ? new Date(m.duration * 1000).toISOString().substr(11, 8)
      : '00:00:00';

    let callMessage;
    if (m.status === 'cancelled' && m.duration === 0) {
      callMessage = `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${m.initiator} –∫ ${m.recipient} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`;
    } else if (m.status === 'cancelled') {
      callMessage = `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${m.initiator} –∫ ${m.recipient} –±—ã–ª —Å–±—Ä–æ—à–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${durStr}.`;
    } else if (m.duration === 0) {
      callMessage = `üìû –ò—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç ${m.initiator} –∫ ${m.recipient} –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç.`;
    } else {
      callMessage = `üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç ${m.initiator} –∫ ${m.recipient} –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${durStr}.`;
    }

    appendCenterCall(callMessage);
    return;
  }

  // 3) –§–∞–π–ª–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã messages + files)
  if (m.type === 'message' && m.file_id !== null) {
    appendFile(
      m.sender_nickname,
      m.file_id,
      m.filename,
      m.mime_type,
      m.time
    );
    return;
  }

  // 4) –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (m.type === 'message' && m.text !== null) {
    appendMessage(
      m.sender_nickname,
      m.text,
      m.time
    );
    return;
  }

  console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏:', m);
});



}  // <-- –∑–∞–∫—Ä—ã–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é joinRoom
  
function appendMessage(sender, text, time, callId = null) {
  const chatBox = document.getElementById('chat-box');

  // 1) –°–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ –∑–≤–æ–Ω–∫—É ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π div
  if (callId !== null) {
    const el = document.createElement('div');
    el.className = 'call-event';    // <-- —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
    el.textContent = text;
    chatBox.appendChild(el);
    chatBox.scrollTop = chatBox.scrollHeight;
    return;
  }

  // 2) –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
  const wrapper = document.createElement('div');
  wrapper.className = 'message-wrapper';
  const msgEl = document.createElement('div');
  msgEl.className = sender === userNickname ? 'my-message' : 'other-message';

  const info = document.createElement('div');
  info.className = 'message-info';
  info.textContent = `${sender} ‚Ä¢ ${new Date(time).toLocaleTimeString([], {
    hour: '2-digit', minute: '2-digit'
  })}`;

  const bubble = document.createElement('div');
  bubble.className = 'message-bubble';
  const textEl = document.createElement('div');
  textEl.className = 'message-text';
  textEl.textContent = text;
  bubble.appendChild(textEl);

  msgEl.append(info, bubble);
  wrapper.appendChild(msgEl);
  chatBox.appendChild(wrapper);
  chatBox.scrollTop = chatBox.scrollHeight;
}



  async function downloadFile(fileId, filename) {
    try {
      const res = await fetch(`${API_URL}/files/${fileId}`);
      if (!res.ok) throw new Error('Fetch error');
      const blob = await res.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    } catch (e) {
      console.error('Download failed:', e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
    }
  }


async function appendFile(sender, fileId, filename, mimeType, time) {
  // 1) –î—É–±–ª–∏
  if (renderedFileIds.has(fileId)) return;
  renderedFileIds.add(fileId);

  // 2) –û–±—â–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
  const chatBox = document.getElementById('chat-box');
  const wrapper = document.createElement('div');
  wrapper.className = 'message-wrapper';

  const msgEl = document.createElement('div');
  msgEl.className = sender === userNickname ? 'my-message' : 'other-message';

  const info = document.createElement('div');
  info.className = 'message-info';
  info.textContent = `${sender} ‚Ä¢ ${new Date(time).toLocaleTimeString([], {
    hour: '2-digit', minute: '2-digit'
  })}`;

  const bubble = document.createElement('div');
  bubble.className = 'message-bubble media-bubble';

  // –°—Ä–∞–∑—É –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ DOM (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è fetch)
  msgEl.append(info, bubble);
  wrapper.appendChild(msgEl);
  chatBox.appendChild(wrapper);
  chatBox.scrollTop = chatBox.scrollHeight;

  // 3) –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (mimeType.startsWith('image/')) {
    const apiSrc = `${API_URL}/files/${fileId}`;
    const img = document.createElement('img');
    // —É–±–∏—Ä–∞–µ–º alt, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞–ª—Å—è —Ç–µ–∫—Å—Ç ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª
    img.alt = '';
    // –¥–ª—è –ª–∞–π—Ç–±–æ–∫—Å–∞
    img.dataset.src      = apiSrc;
    img.dataset.fileId   = fileId;
    img.dataset.filename = filename;
    bubble.appendChild(img);

    // –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º blob, –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–∏–º src
    fetch(apiSrc, { headers: { 'Authorization': `Bearer ${token}` } })
      .then(res => {
        if (!res.ok) throw new Error(res.statusText);
        return res.blob();
      })
      .then(blob => {
        img.src = URL.createObjectURL(blob);
        // —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:
        // setTimeout(() => URL.revokeObjectURL(img.src), 60_000);
      })
      .catch(err => {
        console.warn('–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å blob-–∑–∞–≥—Ä—É–∑–∏—Ç—å, –¥–µ–ª–∞–µ–º fallback:', err);
        img.src = apiSrc;
      });

    return;  // –Ω–∞ —ç—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏ –ù–ï –∏–¥—ë–º –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –±–ª–æ–∫–∏
  }

  // 4) –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã (–∞—É–¥–∏–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª)
  if (mimeType.startsWith('audio/')) {
    const audio = document.createElement('audio');
    audio.controls = true;
    audio.src = `${API_URL}/files/${fileId}`;
    bubble.appendChild(audio);

  } else if (mimeType.startsWith('video/')) {
    const video = document.createElement('video');
    video.controls = true;
    video.src = `${API_URL}/files/${fileId}`;
    bubble.appendChild(video);

  } else {
    const link = document.createElement('a');
    link.href = '#';
    link.textContent = `üìé ${filename}`;
    link.onclick = e => {
      e.preventDefault();
      downloadFile(fileId, filename);
    };
    bubble.appendChild(link);
  }
}


  function sendMessage() {
    const text = textarea.value.trim();
    if (!text || !socket || socket.readyState !== WebSocket.OPEN) return;
    socket.send(JSON.stringify({ type: 'message', token, roomId: currentRoom, text }));
    textarea.value = '';
  }
  sendBtn.onclick = sendMessage;
  textarea.addEventListener('keypress', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      sendMessage();
    }
  });

  // Initialization
  loadRooms();
  loadUsers();
});
