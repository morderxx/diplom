const content = document.getElementById('finance-content');
const buttons = document.querySelectorAll('.finance-nav button');

buttons.forEach(btn => {
  btn.addEventListener('click', () => {
    buttons.forEach(b => b.classList.remove('active'));
    btn.classList.add('active');

    const tab = btn.dataset.tab;
    content.classList.add('active'); // –¥–µ–ª–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–∏–º—ã–º
    if (tab === 'exchange') {
      showExchange();
    } else if (tab === 'wallet') {
      content.innerHTML = `
        <h3>–ö–æ—à–µ–ª—ë–∫</h3>
        <div class="wallet-info">
          <div class="balance">‚ÇΩ 152,340.00</div>
          <ul class="transactions">
            <li><span>–ü–æ–∫—É–ø–∫–∞ BTC</span><span>-‚ÇΩ 15,000</span></li>
            <li><span>–ü—Ä–æ–¥–∞–∂–∞ ETH</span><span>+‚ÇΩ 8,500</span></li>
            <li><span>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</span><span>+‚ÇΩ 20,000</span></li>
          </ul>
        </div>`;
    } else if (tab === 'stats') {
      content.innerHTML = `
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div class="stats-chart">üìà –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥—Ä–∞—Ñ–∏–∫</div>`;
    }
  });
});

async function showExchange() {
  content.innerHTML = `
    <h3>–û–±–º–µ–Ω–Ω–∏–∫ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç—ã</h3>
    <form class="exchange-form" id="exchange-form">
      <label>
        –ò–∑ –≤–∞–ª—é—Ç—ã
        <select id="from-currency"></select>
      </label>
      <label>
        –í –≤–∞–ª—é—Ç—É
        <select id="to-currency"></select>
      </label>
      <label style="grid-column: span 2;">
        –°—É–º–º–∞
        <input type="number" id="amount" value="1" min="0" step="any" required>
      </label>
      <button type="submit">–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
    </form>
    <div class="exchange-result" id="exchange-result">–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã</div>
  `;

  const currencies = {
    USD: 'US Dollar', RUB: 'Russian Ruble', EUR: 'Euro',
    BTC: 'Bitcoin', ETH: 'Ethereum', LTC: 'Litecoin', DOGE: 'Dogecoin',
    BNB: 'Binance Coin', USDT: 'Tether', XRP: 'Ripple'
  };

  // ID –Ω–∞ CoinGecko
  const cgIds = {
    BTC: 'bitcoin', ETH: 'ethereum', LTC: 'litecoin',
    DOGE: 'dogecoin', BNB: 'binancecoin', USDT: 'tether', XRP: 'ripple'
  };

  const fiatSet = new Set(['USD','RUB','EUR']);
  const fromSel = document.getElementById('from-currency');
  const toSel   = document.getElementById('to-currency');

  // –∑–∞–ø–æ–ª–Ω–∏–º —Å–µ–ª–µ–∫—Ç—ã
  for (let code in currencies) {
    fromSel.add(new Option(`${code} ‚Äî ${currencies[code]}`, code));
    toSel  .add(new Option(`${code} ‚Äî ${currencies[code]}`, code));
  }
  fromSel.value = 'USD';
  toSel.value   = 'BTC';

  document.getElementById('exchange-form').addEventListener('submit', async e => {
    e.preventDefault();
    const from = fromSel.value, to = toSel.value;
    const amount = parseFloat(document.getElementById('amount').value);
    const out = document.getElementById('exchange-result');

    if (isNaN(amount) || amount <= 0) {
      out.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
      return;
    }
    out.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';

    try {
      let result;

      // 1) Fiat ‚Üí Fiat
      if (fiatSet.has(from) && fiatSet.has(to)) {
        const r = await fetch(
          `https://api.exchangerate.host/convert?from=${from}&to=${to}&amount=${amount}`
        );
        const d = await r.json();
        result = d.result;

      // 2) Crypto ‚Üí Crypto
      } else if (!fiatSet.has(from) && !fiatSet.has(to)) {
        const idF = cgIds[from], idT = cgIds[to];
        const r   = await fetch(
          `https://api.coingecko.com/api/v3/simple/price?ids=${idF},${idT}&vs_currencies=usd`
        );
        const d   = await r.json();
        const rateFromUsd = d[idF].usd;
        const rateToUsd   = d[idT].usd;
        // –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞:
        result = amount * (rateFromUsd / rateToUsd);

      // 3) Crypto ‚Üí Fiat
      } else if (!fiatSet.has(from) && fiatSet.has(to)) {
        const idF = cgIds[from];
        const r   = await fetch(
          `https://api.coingecko.com/api/v3/simple/price?ids=${idF}&vs_currencies=${to.toLowerCase()}`
        );
        const d   = await r.json();
        const rate = d[idF][to.toLowerCase()];
        result = amount * rate;

      // 4) Fiat ‚Üí Crypto
      } else {
        const idT = cgIds[to];
        // –ø–æ–ª—É—á–∏–º —Ü–µ–Ω—É 1 crypto –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–∏–∞—Ç–µ
        const r   = await fetch(
          `https://api.coingecko.com/api/v3/simple/price?ids=${idT}&vs_currencies=${from.toLowerCase()}`
        );
        const d   = await r.json();
        const rate = d[idT][from.toLowerCase()];
        // —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ crypto –∑–∞ amount —Ñ–∏–∞—Ç–∞:
        result = amount / rate;
      }

      out.innerHTML = `
        <strong>${amount} ${from}</strong> =
        <strong>${result.toFixed(6)} ${to}</strong>
      `;
    } catch (err) {
      console.error(err);
      out.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.';
    }
  });
}

showExchange();
